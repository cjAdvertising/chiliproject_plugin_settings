{"name":"Chiliproject Plugin Settings","body":"\r\nOverview\r\n========\r\n\r\nThis plugin makes it easier for your plugin to provide a settings pane for\r\nproject or user settings. It makes a few assumptions currently:\r\n\r\n* You are setting up a project module in your `init.rb`.\r\n\r\n* You have a controller named after your project modules, or \r\n  don't mind creating one.\r\n\r\n\r\nIntegration\r\n-----------\r\n\r\nClone/download the plugin into `vendors/plugins/chiliproject_plugin_settings`.\r\n\r\nAdd the following to your plugin's `init.rb`, using `example` as an example \r\nproject module name: \r\n\r\n```ruby\r\nRedmine::Plugin.register :my_example_plugin do\r\n  name 'An example plugin'\r\n  ...\r\n\r\n\r\n  project_module :example do\r\n    permission :view_example, {:example => [:index, :show]}\r\n\r\n    # Add a permission for the project settings\r\n    permission :manage_example, {:example => :project_settings}\r\n  end\r\nend\r\n\r\nrequire \"dispatcher\"\r\nDispatcher.to_prepare :my_example_plugin do\r\n\r\n  require_dependency \"chiliproject_plugin_settings\"\r\n\r\n  # Register the example module with the settings plugin for projects only\r\n  ChiliprojectPluginSettings.register :example, :project\r\n\r\n  # To enable for both project and user settings:\r\n  # ChiliprojectPluginSettings.register :example, [:project, :user]\r\nend\r\n```\r\n\r\nIn your project module's controller (`ExampleController` in this example), \r\nadd the following:\r\n\r\n```ruby\r\nclass ExampleController < ApplicationController\r\n\r\n  # Be sure to exclude any before_filters:\r\n  # before_filter :find_project, :exclude => [:project_settings, :user_settings]\r\n\r\n  # Include the settings plugin actions and helpers\r\n  include ChiliprojectPluginSettingsHelper\r\nend\r\n```\r\n\r\nAdd a model named for the module and settings type (`Project` or `User`):\r\n\r\n```ruby\r\nclass ExampleProjectSettings < ActiveRecord::Base\r\n  belongs_to :project\r\n  validates_presence_of :project, :name, :content\r\nend\r\n```\r\n\r\nAdd a migration for your new model:\r\n\r\n```ruby\r\nclass CreateExampleProjectSettings < ActiveRecord::Migration\r\n  def self.up\r\n    create_table :example_project_settings do |t|\r\n      t.column :project_id, :integer, :null => false\r\n      t.column :name, :string, :limit => 100, :null => false\r\n      t.column :content, :string, :limit => 100, :null => false\r\n    end\r\n    add_index :example_project_settings, :project_id, :name => :example_project_settings_project_id\r\n  end\r\n\r\n  def self.down\r\n    drop_table :example_project_settings\r\n  end\r\nend\r\n```\r\n\r\nCreate a form view template named after your project module \r\n(`app/views/projects/settings/_example.rhtml` in this example):\r\n\r\n```rhtml\r\n<% remote_form_for :example_project_settings, ExampleProjectSettings.find_by_project_id(@project.id),\r\n                   :url => { :controller => 'example', :action => 'project_settings', :id => @project },\r\n                   :builder => TabularFormBuilder,\r\n                   :lang => current_language do |f| %>\r\n\r\n<%= error_messages_for 'example_project_settings' %>\r\n\r\n<div class=\"box tabular\">\r\n  <p>\r\n    <%= f.text_field :name, :required => true %>\r\n  </p>\r\n  <p>\r\n    <%= f.text_field :content, :required => true %>\r\n  </p>\r\n</div>\r\n\r\n<%= submit_tag(l(:button_save)) %>\r\n\r\n<% end %>\r\n```\r\n","tagline":"A settings plugin for your Chiliproject plugins.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}